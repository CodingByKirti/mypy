Sub FilterAndCleanFiles()
    Dim FileName As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim L3Value As String
    Dim OutputFolderPath As String

    ' Check global variable for previously selected folder
    If OutputFolderPathGlobal = "" Then
        If MsgBox("Output folder not selected. Do you want to select it now?", vbYesNo + vbQuestion) = vbYes Then
            With Application.FileDialog(msoFileDialogFolderPicker)
                .Title = "Select Output Folder (L3 Files)"
                If .Show = -1 Then
                    OutputFolderPathGlobal = .SelectedItems(1) & "\"
                Else
                    MsgBox "Cancelled. Please run the first macro first.", vbExclamation
                    Exit Sub
                End If
            End With
        Else
            MsgBox "Please run the first macro first to generate L3 files.", vbInformation
            Exit Sub
        End If
    End If

    OutputFolderPath = OutputFolderPathGlobal

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual

    ' Loop through all .xlsx files in the folder
    FileName = Dir(OutputFolderPath & "*.xlsx")
    Do While FileName <> ""
        ' Open the workbook
        Set wb = Workbooks.Open(OutputFolderPath & FileName, UpdateLinks:=False, ReadOnly:=False)
        Set ws = Nothing
        On Error Resume Next
        Set ws = wb.Sheets("Data")
        On Error GoTo 0

        If Not ws Is Nothing Then
            L3Value = Replace(FileName, ".xlsx", "") ' Extract L3 value from filename (without .xlsx)
            lastRow = ws.Cells(ws.Rows.Count, "G").End(xlUp).Row

            ' Apply filter on column G (assuming L3 values are in column G)
            ws.Rows("2:2").AutoFilter Field:=7, Criteria1:="<>"
            
            ' Filter to exclude the L3Value
            ws.Rows("2:2").AutoFilter Field:=7, Criteria1:="<>", Operator:=xlAnd, Criteria2:="<>" & L3Value

            ' Select and delete all visible rows that do not match L3Value
            If lastRow > 2 Then
                On Error Resume Next
                ws.Rows("3:" & lastRow).SpecialCells(xlCellTypeVisible).Delete
                On Error GoTo 0
            End If

            ' Turn off filter
            ws.AutoFilterMode = False

            ' Save the workbook
            wb.Save
        End If

        wb.Close SaveChanges:=False
        FileName = Dir ' Move to the next file
    Loop

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True

    MsgBox "Filtering and cleanup completed!", vbInformation
End Sub
=================================================
Sub FilterAndCleanFiles()
    Dim FileName As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim L3Value As String
    Dim deleteRange As Range
    Dim OutputFolderPath As String

    ' Check global variable for previously selected folder
    If OutputFolderPathGlobal = "" Then
        If MsgBox("Output folder not selected. Do you want to select it now?", vbYesNo + vbQuestion) = vbYes Then
            With Application.FileDialog(msoFileDialogFolderPicker)
                .Title = "Select Output Folder (L3 Files)"
                If .Show = -1 Then
                    OutputFolderPathGlobal = .SelectedItems(1) & "\"
                Else
                    MsgBox "Cancelled. Please run the first macro first.", vbExclamation
                    Exit Sub
                End If
            End With
        Else
            MsgBox "Please run the first macro first to generate L3 files.", vbInformation
            Exit Sub
        End If
    End If

    OutputFolderPath = OutputFolderPathGlobal

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual

    ' Loop through all .xlsx files
    FileName = Dir(OutputFolderPath & "*.xlsx")
    Do While FileName <> ""
        Set wb = Workbooks.Open(OutputFolderPath & FileName, UpdateLinks:=False, ReadOnly:=False)
        Set ws = Nothing
        On Error Resume Next
        Set ws = wb.Sheets("Data")
        On Error GoTo 0

        If Not ws Is Nothing Then
            L3Value = Replace(FileName, ".xlsx", "")
            lastRow = ws.Cells(ws.Rows.Count, "G").End(xlUp).Row
            Set deleteRange = Nothing

            ' Start from row 3 (assuming row 2 is header)
            For i = 3 To lastRow
                If Trim(ws.Cells(i, "G").Value) <> L3Value Then
                    If deleteRange Is Nothing Then
                        Set deleteRange = ws.Rows(i)
                    Else
                        Set deleteRange = Union(deleteRange, ws.Rows(i))
                    End If
                End If
            Next i

            ' Delete all non-matching rows at once
            If Not deleteRange Is Nothing Then deleteRange.Delete

            wb.Save
        End If

        wb.Close SaveChanges:=False
        FileName = Dir
    Loop

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True

    MsgBox "Filtering and cleanup completed!", vbInformation
End Sub

-------------------------------



........................

Sub FilterAndCleanFiles()
    Dim FileName As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim rng As Range
    Dim L3 As String
    Dim userResponse As VbMsgBoxResult
    Dim folderPicker As FileDialog

    ' If OutputFolderPath is not set, ask user if they want to select it manually
    If OutputFolderPath = "" Then
        userResponse = MsgBox("No output folder path is set." & vbNewLine & _
                              "Do you want to manually select the folder where the L3 split files are saved?", _
                              vbYesNo + vbQuestion, "Select Output Folder")

        If userResponse = vbYes Then
            Set folderPicker = Application.FileDialog(msoFileDialogFolderPicker)
            folderPicker.Title = "Select the folder with L3 split files"
            If folderPicker.Show = -1 Then ' User picked a folder
                OutputFolderPath = folderPicker.SelectedItems(1) & "\"
            Else
                MsgBox "No folder selected. Operation cancelled.", vbExclamation
                Exit Sub
            End If
        Else
            MsgBox "Please run the first macro to generate split files first.", vbInformation
            Exit Sub
        End If
    End If

    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    FileName = Dir(OutputFolderPath & "*.xlsx")

    Do While FileName <> ""
        L3 = Replace(FileName, ".xlsx", "")
        Set wb = Workbooks.Open(OutputFolderPath & FileName)

        On Error Resume Next
        Set ws = wb.Sheets("Data")
        On Error GoTo 0

        If Not ws Is Nothing Then
            lastRow = ws.Cells(ws.Rows.Count, "G").End(xlUp).Row
            ws.Rows("2:2").AutoFilter Field:=7, Criteria1:="<>" & L3

            On Error Resume Next
            Set rng = ws.Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow
            If Not rng Is Nothing Then rng.Delete
            On Error GoTo 0

            If ws.AutoFilterMode Then ws.AutoFilterMode = False
            wb.RefreshAll
        End If

        wb.Save
        wb.Close False
        Set ws = Nothing
        Set wb = Nothing
        FileName = Dir
    Loop

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    MsgBox "Filtering and cleanup completed successfully!", vbInformation, "Done"
End Sub
;;;;;;;;;;;;;;;;;



Sub FilterAndCleanFiles()
    Dim SaveFolder As String, FileName As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim rng As Range
    Dim L3 As String

    ' Disable alerts, screen updating
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    ' Use the L3_Split_Files subfolder created earlier
    SaveFolder = ThisWorkbook.Path & "\L3_Split_Files\"

    ' Loop through each .xlsx file in the folder
    FileName = Dir(SaveFolder & "*.xlsx")

    Do While FileName <> ""
        ' Extract L3 from file name
        L3 = Replace(FileName, ".xlsx", "")

        ' Open the workbook
        Set wb = Workbooks.Open(SaveFolder & FileName)

        ' Reference "Data" sheet if it exists
        On Error Resume Next
        Set ws = wb.Sheets("Data")
        On Error GoTo 0

        If Not ws Is Nothing Then
            ' Get last row in column G
            lastRow = ws.Cells(ws.Rows.Count, "G").End(xlUp).Row

            ' Apply filter to hide rows not matching L3
            ws.Rows("2:2").AutoFilter Field:=7, Criteria1:="<>" & L3

            ' Delete visible (non-L3) rows
            On Error Resume Next
            Set rng = ws.Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow
            If Not rng Is Nothing Then rng.Delete
            On Error GoTo 0

            ' Remove AutoFilter
            If ws.AutoFilterMode Then ws.AutoFilterMode = False

            ' Refresh connections if any
            wb.RefreshAll
        End If

        ' Save and close the workbook
        wb.Save
        wb.Close False

        ' Reset for next file
        Set ws = Nothing
        Set wb = Nothing
        FileName = Dir
    Loop

    ' Re-enable screen updating
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    MsgBox "Filtering and cleanup completed successfully!", vbInformation, "Done"
End Sub



Sub CreateFilteredFiles()
    Dim wsOptions As Worksheet, wsData As Worksheet
    Dim lastRowOptions As Long, rngL3 As Range, cell As Range
    Dim L3Dict As Object, FilePath As String, L3 As Variant
    Dim NewFilePath As String
    Dim SaveFolder As String, L3Folder As String
    Dim baseFilePath As String
    Dim fso As Object
    Dim tempWorkbook As Workbook
    Dim ws As Worksheet
    
    ' Disable alerts and screen updating
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    ' Ask user to select the base Excel file
    With Application.FileDialog(msoFileDialogFilePicker)
        .Title = "Select the Base Excel File"
        .Filters.Clear
        .Filters.Add "Excel Files", "*.xlsx; *.xlsm"
        If .Show = -1 Then
            baseFilePath = .SelectedItems(1)
        Else
            MsgBox "No file selected. Macro will exit.", vbExclamation
            Exit Sub
        End If
    End With
    
    ' Ask user to select the output folder
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select the Output Folder"
        If .Show = -1 Then
            SaveFolder = .SelectedItems(1)
        Else
            MsgBox "No folder selected. Macro will exit.", vbExclamation
            Exit Sub
        End If
    End With
    
    ' Create a subfolder "L3_Split_Files" inside the selected folder
    L3Folder = SaveFolder & "\L3_Split_Files"
    If Dir(L3Folder, vbDirectory) = "" Then MkDir L3Folder
    
    ' Set reference to Options sheet in the base file
    Set wsOptions = Workbooks.Open(baseFilePath).Sheets("Options")
    
    ' Get last row in column D (L3 values)
    lastRowOptions = wsOptions.Cells(wsOptions.Rows.Count, "D").End(xlUp).Row
    
    ' Create dictionary to store unique L3 values
    Set L3Dict = CreateObject("Scripting.Dictionary")
    
    ' Loop through L3 values and store unique ones
    For Each cell In wsOptions.Range("D2:D" & lastRowOptions)
        If Not L3Dict.Exists(cell.Value) And cell.Value <> "" Then
            L3Dict.Add cell.Value, Nothing
        End If
    Next cell
    
    ' Set FileSystemObject
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' Loop through unique L3 values and create file copies
    For Each L3 In L3Dict.Keys
        ' Define the new file path
        NewFilePath = L3Folder & "\" & L3 & ".xlsx"
        
        ' Copy the base file to the new location using FileSystemObject
        fso.CopyFile baseFilePath, NewFilePath
        
        ' Ensure file exists before opening
        If Dir(NewFilePath) = "" Then
            MsgBox "⚠️ File was not copied successfully to: " & NewFilePath, vbCritical
            Exit Sub
        End If
        
        DoEvents ' Let system finish file I/O
        
        ' Try opening the copied file
        Set tempWorkbook = Workbooks.Open(NewFilePath)
        
        If tempWorkbook Is Nothing Then
            MsgBox "❌ Could not open file: " & NewFilePath, vbCritical
            Exit Sub
        End If
        
        ' Delete "Region View" sheet (formerly "Reg Summary") if it exists
        On Error Resume Next ' Prevent error if the sheet doesn't exist
        Set ws = tempWorkbook.Sheets("Region View")
        If Not ws Is Nothing Then
            ws.Delete
        End If
        On Error GoTo 0 ' Re-enable error handling
        
        ' Delete "Country View" sheet if it exists
        On Error Resume Next
        Set ws = tempWorkbook.Sheets("Country View")
        If Not ws Is Nothing Then
            ws.Delete
        End If
        On Error GoTo 0
        
        ' Save the workbook in .xlsx format
        tempWorkbook.SaveAs Filename:=NewFilePath, FileFormat:=xlOpenXMLWorkbook
        
        ' Close the workbook without saving again
        tempWorkbook.Close False
    Next L3
    
    ' Re-enable alerts and screen updating
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
    MsgBox "Files created and unwanted sheets deleted successfully!", vbInformation, "Done"
End Sub
00000



:::::::::::::::::::::
Sub RunSplitByColI()
    If selectedFile = "" Or outputFolder = "" Then
        MsgBox "Please select both the file and output folder.", vbExclamation
        Exit Sub
    End If

    Dim fso As Object: Set fso = CreateObject("Scripting.FileSystemObject")
    Dim wb As Workbook, wbCopy As Workbook
    Dim ws As Worksheet
    Dim val As Variant, vals As Collection
    Dim fileName As String
    Dim cell As Range
    Dim lastRow As Long, colI As Long

    Set wb = Workbooks.Open(selectedFile)
    Set ws = wb.Sheets("Options")

    ' Get unique values from Column I
    Set vals = New Collection
    On Error Resume Next
    For Each cell In ws.Range("I2:I" & ws.Cells(ws.Rows.Count, "I").End(xlUp).Row)
        If Trim(cell.Value) <> "" Then vals.Add cell.Value, CStr(cell.Value)
    Next
    On Error GoTo 0

    wb.Close False ' Close source workbook after reading unique values

    ' Loop through each unique value
    For Each val In vals
        fileName = outputFolder & "\" & val & ".xlsm"
        fso.CopyFile selectedFile, fileName
        Set wbCopy = Workbooks.Open(fileName)
        Set ws = wbCopy.Sheets("Options")

        ' Filter and delete unwanted rows
        colI = 9 ' Column I
        lastRow = ws.Cells(ws.Rows.Count, colI).End(xlUp).Row

        With ws
            .AutoFilterMode = False
            .Range("A1").AutoFilter Field:=colI, Criteria1:="<>" & val

            On Error Resume Next
            .Range("A2:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            On Error GoTo 0

            .AutoFilterMode = False
        End With

        ' Optionally delete extra sheets
        Application.DisplayAlerts = False
        On Error Resume Next
        wbCopy.Sheets("L3 View").Delete
        wbCopy.Sheets("L4 View").Delete
        On Error GoTo 0
        Application.DisplayAlerts = True

        wbCopy.Save
        wbCopy.Close False
    Next

    MsgBox "✅ Done! Files saved to: " & outputFolder, vbInformation
End Sub
----------------





Sub FilterAndCleanL3Files()
    Dim SaveFolder As String, FileName As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long, rng As Range
    Dim L3 As String
    Const L3Col As Long = 7 ' Column G

    ' Disable alerts and screen updating
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    ' Folder where filtered files were saved
    SaveFolder = ThisWorkbook.Path & "\Filtered_Files\"

    ' Loop through each Excel file
    FileName = Dir(SaveFolder & "*.xlsx")
    Do While FileName <> ""
        ' Open the workbook
        Set wb = Workbooks.Open(SaveFolder & FileName)

        ' Get L3 value from file name
        L3 = Replace(FileName, ".xlsx", "")

        ' Reference Data sheet
        On Error Resume Next
        Set ws = wb.Sheets("Data")
        On Error GoTo 0

        If Not ws Is Nothing Then
            ' Find last row in column G
            lastRow = ws.Cells(ws.Rows.Count, L3Col).End(xlUp).Row

            ' Apply AutoFilter to column G (L3)
            ws.Rows("2:2").AutoFilter Field:=L3Col, Criteria1:="<>" & L3

            ' Delete visible rows (not matching L3)
            If lastRow > 2 Then
                On Error Resume Next
                Set rng = ws.Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow
                On Error GoTo 0
                If Not rng Is Nothing Then rng.Delete
            End If

            ' Turn off AutoFilter
            If ws.AutoFilterMode Then ws.AutoFilterMode = False

            ' Refresh data connections
            wb.RefreshAll
        End If

        ' Save and close
        wb.Save
        wb.Close False

        ' Next file
        FileName = Dir
    Loop

    ' Re-enable alerts and screen updating
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    MsgBox "✅ L3 filtering done successfully!", vbInformation, "Done"
End Sub



Sub FilterAndCleanFiles()
    Dim SaveFolder As String, FileName As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long, rng As Range
    Dim Region As String
    Const RegionCol As Long = 72 ' Column BT

    ' Disable alerts and screen updating
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    ' Folder where the filtered files were saved
    SaveFolder = ThisWorkbook.Path & "\Filtered_Files\"

    ' Loop through each Excel file
    FileName = Dir(SaveFolder & "*.xlsx")
    Do While FileName <> ""
        ' Open the workbook
        Set wb = Workbooks.Open(SaveFolder & FileName)

        ' Get Region from file name
        Region = Replace(FileName, ".xlsx", "")

        ' Reference Data sheet
        On Error Resume Next
        Set ws = wb.Sheets("Data")
        On Error GoTo 0

        If Not ws Is Nothing Then
            ' Find last row in column BT
            lastRow = ws.Cells(ws.Rows.Count, RegionCol).End(xlUp).Row

            ' Apply AutoFilter on row 2
            ws.Rows("2:2").AutoFilter Field:=RegionCol, Criteria1:="<>" & Region

            ' Delete visible rows (except header)
            If lastRow > 2 Then
                On Error Resume Next
                Set rng = ws.Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow
                On Error GoTo 0
                If Not rng Is Nothing Then rng.Delete
            End If

            ' Turn off filter
            If ws.AutoFilterMode Then ws.AutoFilterMode = False

            ' Refresh data connections
            wb.RefreshAll
        End If

        ' Save and close
        wb.Save
        wb.Close False

        ' Next file
        FileName = Dir
    Loop

    ' Restore settings
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    MsgBox "✅ Region-based filtering completed successfully!", vbInformation, "Done"
End Sub

--------------------------------


Sub CreateFilteredFiles()
    Dim wsOptions As Worksheet
    Dim lastRowOptions As Long, cell As Range
    Dim L3Dict As Object, L3 As Variant
    Dim selectedFile As String, SaveFolder As String, fileName As String
    Dim fso As Object, wbCopy As Workbook, ws As Worksheet

    ' Prompt user to select the base file
    With Application.FileDialog(msoFileDialogFilePicker)
        .Title = "Select the Base File"
        .Filters.Add "Excel Files", "*.xlsm; *.xlsx", 1
        If .Show <> -1 Then Exit Sub
        selectedFile = .SelectedItems(1)
    End With

    ' Set reference to Options sheet
    Set wsOptions = ThisWorkbook.Sheets("Options")
    lastRowOptions = wsOptions.Cells(wsOptions.Rows.Count, "D").End(xlUp).Row

    ' Create dictionary for unique L3 values
    Set L3Dict = CreateObject("Scripting.Dictionary")
    For Each cell In wsOptions.Range("D2:D" & lastRowOptions)
        If cell.Value <> "" And Not L3Dict.Exists(cell.Value) Then
            L3Dict.Add cell.Value, Nothing
        End If
    Next cell

    ' Create folder to save files
    SaveFolder = ThisWorkbook.Path & "\Filtered_Files\"
    If Dir(SaveFolder, vbDirectory) = "" Then MkDir SaveFolder

    Set fso = CreateObject("Scripting.FileSystemObject")

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    ' Loop through each L3 value and create copies
    For Each L3 In L3Dict.Keys
        fileName = SaveFolder & L3 & ".xlsx"

        ' Copy base file to new file
        fso.CopyFile selectedFile, fileName

        ' Open the copied workbook
        Set wbCopy = Workbooks.Open(fileName)

        ' Delete "Reg Summary" sheet if exists
        On Error Resume Next
        Set ws = wbCopy.Sheets("Reg Summary")
        If Not ws Is Nothing Then ws.Delete
        On Error GoTo 0

        wbCopy.Save
        wbCopy.Close False
    Next L3

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    MsgBox "Files created using fso.CopyFile and 'Reg Summary' deleted successfully!", vbInformation, "Done"
End Sub
























Sub RunSplitByColI()

    If selectedFile = "" Or outputFolder = "" Then
        MsgBox "Please select both the file and output folder.", vbExclamation
        Exit Sub
    End If

    Dim fso As Object: Set fso = CreateObject("Scripting.FileSystemObject")
    Dim wb As Workbook, wbCopy As Workbook
    Dim ws As Worksheet
    Dim val As Variant, vals As Collection
    Dim fileName As String
    Dim cell As Range
    Dim regionName As String
    Dim dataWS As Worksheet
    Dim lastRow As Long
    Dim filterCol As Long: filterCol = 72 ' Column BT

    Set wb = Workbooks.Open(selectedFile)
    Set ws = wb.Sheets("Options")

    Set vals = New Collection
    On Error Resume Next
    For Each cell In ws.Range("I2:I" & ws.Cells(ws.Rows.Count, "I").End(xlUp).Row)
        If cell.Value <> "" Then vals.Add cell.Value, CStr(cell.Value)
    Next
    On Error GoTo 0

    wb.Close False

    For Each val In vals
        fileName = outputFolder & "\" & val & ".xlsx"
        regionName = val
        
        ' Copy the base file
        fso.CopyFile selectedFile, fileName
        Set wbCopy = Workbooks.Open(fileName)
        
        ' Delete L3 and L4 View sheets
        Application.DisplayAlerts = False
        On Error Resume Next
        wbCopy.Sheets("L3 View").Delete
        wbCopy.Sheets("L4 View").Delete
        On Error GoTo 0
        Application.DisplayAlerts = True

        ' Filter Data sheet
        On Error Resume Next
        Set dataWS = wbCopy.Sheets("Data")
        On Error GoTo 0
        
        If Not dataWS Is Nothing Then
            lastRow = dataWS.Cells(dataWS.Rows.Count, filterCol).End(xlUp).Row
            
            ' Clear any existing filter
            If dataWS.AutoFilterMode Then dataWS.AutoFilterMode = False
            
            ' Apply filter on Region (BT column)
            With dataWS.Range("A1").CurrentRegion
                .AutoFilter Field:=filterCol, Criteria1:="<>" & regionName
                On Error Resume Next
                .Offset(1, 0).Resize(.Rows.Count - 1).SpecialCells(xlCellTypeVisible).EntireRow.Delete
                On Error GoTo 0
                .AutoFilter
            End With
        End If

        wbCopy.RefreshAll
        wbCopy.Save
        wbCopy.Close False
    Next

    MsgBox "✅ Done! Files created, filtered, and saved in: " & outputFolder, vbInformation

End Sub








...............
Subject: Updated Billing Output File & Responses to Raised Points

Dear [Process Owner's Name],

As discussed, I have reviewed and addressed the points raised in your last email. The updated Billing Output file is attached along with a detailed response document outlining the status of each point.

Summary of Key Updates:
Corrections have been made to employee details, AID, billing details, and cost centers.
Existing reasons for non-billable positions are now retained, and dropdowns have been added where applicable.
Certain points, such as FTE updates and open positions, require further clarification.
Control checks and additional columns (Manager Operations & AVP) have been incorporated.
For points requiring confirmation, I have highlighted them in the attached document. Please review and let me know if any adjustments are needed.

Let me know if you need any further clarifications.

Best regards,








Sub MasterFilterMacro()
    ' Disable screen updating for speed
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    
    ' Call multiple macros in sequence
    Call FilterRegionData
    Call FilterCategoryData
    Call UpdateL4Summary
    Call RefreshAndSave
    
    ' Restore settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    
    MsgBox "All filters applied successfully!", vbInformation, "Completed"
End Sub





Sub FilterAndDeleteRowsByRegion()
    Dim folderPath As String, fileName As String, filePath As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long, regionCol As Long
    Dim fileNameWithoutExt As String
    Dim cell As Range, headerRow As Range
    
    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Folder containing the region-split files
    folderPath = ThisWorkbook.Path & "\Filtered_Regions\"

    ' Get the first file in the folder
    fileName = Dir(folderPath & "*.xlsx")

    ' Process each file
    Do While fileName <> ""
        ' Build full file path
        filePath = folderPath & fileName

        ' Open the workbook
        Set wb = Workbooks.Open(filePath)
        Set ws = wb.Sheets("Data") ' Ensure sheet exists

        ' Extract file name without extension
        fileNameWithoutExt = Left(fileName, InStrRev(fileName, ".") - 1)

        ' Find last row in "Data" sheet
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        
        ' Find "Region" column dynamically in row 2 (trim spaces, case-insensitive)
        Set headerRow = ws.Rows(2)
        regionCol = 0
        For Each cell In headerRow.Cells
            If Trim(LCase(cell.Value)) = "region" Then
                regionCol = cell.Column
                Exit For
            End If
        Next cell

        ' If "Region" column is not found, skip the file
        If regionCol = 0 Then
            MsgBox "Column 'Region' not found in " & fileName, vbExclamation
            wb.Close False
            fileName = Dir
            GoTo NextFile
        End If

        ' Apply filter to keep only rows where Region = file name
        With ws
            .AutoFilterMode = False  ' Ensure filter is off
            .Range("A2").CurrentRegion.AutoFilter Field:=regionCol, Criteria1:="<>" & fileNameWithoutExt
            
            ' Delete visible rows (except header)
            On Error Resume Next
            .Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            On Error GoTo 0

            ' Clear filter
            .AutoFilterMode = False
        End With

        ' Save & Close the file
        wb.Save
        wb.Close False

NextFile:
        ' Move to the next file
        fileName = Dir
    Loop

    ' Restore application settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True

    MsgBox "Filtering completed successfully!", vbInformation, "Done"
End Sub


Sub FilterAndDeleteRowsByRegion()
    Dim folderPath As String, fileName As String, filePath As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long, regionCol As Long
    Dim fileNameWithoutExt As String
    Dim cell As Range, headerRow As Range
    
    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Folder containing the region-split files
    folderPath = ThisWorkbook.Path & "\Filtered_Regions\"

    ' Get the first file in the folder
    fileName = Dir(folderPath & "*.xlsx")

    ' Process each file
    Do While fileName <> ""
        ' Build full file path
        filePath = folderPath & fileName

        ' Open the workbook
        Set wb = Workbooks.Open(filePath)
        Set ws = wb.Sheets("Data") ' Ensure sheet exists

        ' Extract file name without extension
        fileNameWithoutExt = Left(fileName, InStrRev(fileName, ".") - 1)

        ' Find last row in "Data" sheet
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        
        ' Find "Region" column dynamically in row 2 (trim spaces, case-insensitive)
        Set headerRow = ws.Rows(2)
        regionCol = 0
        For Each cell In headerRow.Cells
            If Trim(LCase(cell.Value)) = "region" Then
                regionCol = cell.Column
                Exit For
            End If
        Next cell

        ' If "Region" column is not found, skip the file
        If regionCol = 0 Then
            MsgBox "Column 'Region' not found in " & fileName, vbExclamation
            wb.Close False
            fileName = Dir
            GoTo NextFile
        End If

        ' Apply filter to keep only rows where Region = file name
        With ws
            .AutoFilterMode = False  ' Ensure filter is off
            .Range("A2").CurrentRegion.AutoFilter Field:=regionCol, Criteria1:="<>" & fileNameWithoutExt
            
            ' Delete visible rows (except header)
            On Error Resume Next
            .Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            On Error GoTo 0

            ' Clear filter
            .AutoFilterMode = False
        End With

        ' Save & Close the file
        wb.Save
        wb.Close False

NextFile:
        ' Move to the next file
        fileName = Dir


Sub FilterAndDeleteRowsByFileName()
    Dim folderPath As String, fileName As String, filePath As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long, btCol As Long
    Dim fileNameWithoutExt As String
    Dim headerRow As Range
    
    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Folder containing the region-split files
    folderPath = ThisWorkbook.Path & "\Filtered_Regions\"

    ' Get the first file in the folder
    fileName = Dir(folderPath & "*.xlsx")

    ' Process each file
    Do While fileName <> ""
        ' Build full file path
        filePath = folderPath & fileName

        ' Open the workbook
        Set wb = Workbooks.Open(filePath)
        Set ws = wb.Sheets("Data") ' Ensure sheet exists

        ' Extract file name without extension
        fileNameWithoutExt = Left(fileName, InStrRev(fileName, ".") - 1)

        ' Find last row in "Data" sheet
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        
        ' Find "BT" column dynamically in header row (row 2)
        Set headerRow = ws.Rows(2).Find("BT", LookAt:=xlWhole)
        If headerRow Is Nothing Then
            MsgBox "Column 'BT' not found in " & fileName, vbExclamation
            wb.Close False
            fileName = Dir
            GoTo NextFile
        Else
            btCol = headerRow.Column
        End If

        ' Apply filter to keep only rows where BT = file name
        With ws
            .AutoFilterMode = False  ' Ensure filter is off
            .Range("A2").CurrentRegion.AutoFilter Field:=btCol, Criteria1:="<>" & fileNameWithoutExt
            
            ' Delete visible rows (except header)
            On Error Resume Next
            .Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            On Error GoTo 0

            ' Clear filter
            .AutoFilterMode = False
        End With

        ' Save & Close the file
        wb.Save
        wb.Close False

NextFile:
        ' Move to the next file
        fileName = Dir
    Loop

    ' Restore application settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True

    MsgBox "Filtering completed successfully!", vbInformation, "Done"
End Sub



Sub FilterDataByFileName()
    Dim folderPath As String, fileName As String, filePath As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim fileNameWithoutExt As String

    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Folder where region-split files are stored
    folderPath = ThisWorkbook.Path & "\Filtered_Regions\"

    ' Get the first file in the folder
    fileName = Dir(folderPath & "*.xlsx")

    ' Check if files exist in the folder
    If fileName = "" Then
        MsgBox "No files found in the folder: " & folderPath, vbExclamation, "Error"
        Exit Sub
    End If

    ' Process each file
    Do While fileName <> ""
        ' Build full file path
        filePath = folderPath & fileName

        ' Open the workbook
        Set wb = Workbooks.Open(filePath)
        Set ws = wb.Sheets("Data")

        ' Extract file name without extension
        fileNameWithoutExt = Left(fileName, InStrRev(fileName, ".") - 1)

        ' Find the last row in Data sheet (column BT)
        lastRow = ws.Cells(ws.Rows.Count, "BT").End(xlUp).Row

        ' DEBUG: Print file name and last row for checking
        Debug.Print "Processing: " & fileNameWithoutExt & " | Last Row: " & lastRow

        ' ---- FILTER & DELETE UNMATCHED ROWS ----
        With ws
            .AutoFilterMode = False
            
            ' Apply filter on column BT (assumed to be column 72)
            .Range("A2:A" & lastRow).AutoFilter Field:=72, Criteria1:="<>" & fileNameWithoutExt

            ' Check if there are any visible rows to delete
            If Application.WorksheetFunction.Subtotal(103, .Range("BT3:BT" & lastRow)) > 0 Then
                ' Delete visible rows (excluding headers in row 2)
                On Error Resume Next
                .Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
                On Error GoTo 0
            Else
                Debug.Print "No rows to delete for: " & fileNameWithoutExt
            End If

            ' Clear filter
            .AutoFilterMode = False
        End With

        ' Save & Close the file
        wb.Save
        wb.Close False

        ' Move to the next file
        fileName = Dir  ' **Ensures the loop moves to the next file**
    Loop

    ' Restore application settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True

    MsgBox "Data filtering by file name completed!", vbInformation, "Done"
End Sub


Sub FilterDataByFileName()
    Dim folderPath As String, fileName As String, filePath As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim fileNameWithoutExt As String
    
    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Folder where region-split files are stored
    folderPath = ThisWorkbook.Path & "\Filtered_Regions\"

    ' Get list of files in the folder
    fileName = Dir(folderPath & "*.xlsx")

    ' Process only if there are files
    Do While fileName <> ""
        ' Build full file path
        filePath = folderPath & fileName

        ' Open the workbook
        Set wb = Workbooks.Open(filePath)
        Set ws = wb.Sheets("Data")

        ' Extract the file name without extension
        fileNameWithoutExt = Left(fileName, InStrRev(fileName, ".") - 1)

        ' Find the last row in Data sheet (column BT)
        lastRow = ws.Cells(ws.Rows.Count, "BT").End(xlUp).Row

        ' ---- FILTER & DELETE UNMATCHED ROWS ----
        With ws
            .AutoFilterMode = False
            ' Apply filter on column BT (assumed to be column 72)
            .Range("A2").AutoFilter Field:=72, Criteria1:="<>" & fileNameWithoutExt

            ' Delete visible rows (excluding header in row 2)
            On Error Resume Next
            .Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            On Error GoTo 0

            ' Clear filter
            .AutoFilterMode = False
        End With

        ' Save & Close the file
        wb.Save
        wb.Close False

        ' Move to the next file
        fileName = Dir  ' **This must be called again to move to the next file**
    Loop

    ' Restore application settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True

    MsgBox "Data filtering by file name completed!", vbInformation, "Done"
End Sub


Sub FilterDataByFileName()
    Dim folderPath As String, fileName As String, filePath As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim fileNameWithoutExt As String

    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Folder where region-split files are stored
    folderPath = ThisWorkbook.Path & "\Filtered_Regions\"

    ' Loop through all files in the folder
    fileName = Dir(folderPath & "*.xlsx")

    Do While fileName <> ""
        ' Build full file path
        filePath = folderPath & fileName

        ' Open the workbook
        Set wb = Workbooks.Open(filePath)
        Set ws = wb.Sheets("Data")

        ' Extract the file name without extension
        fileNameWithoutExt = Left(fileName, InStrRev(fileName, ".") - 1)

        ' Find the last row in Data sheet (column BT)
        lastRow = ws.Cells(ws.Rows.Count, "BT").End(xlUp).Row

        ' ---- FILTER & DELETE UNMATCHED ROWS ----
        With ws
            .AutoFilterMode = False
            ' Apply filter on column BT (assumed to be column 72)
            .Range("A2").AutoFilter Field:=72, Criteria1:="<>" & fileNameWithoutExt

            ' Delete visible rows (excluding header in row 2)
            On Error Resume Next
            .Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            On Error GoTo 0

            ' Clear filter
            .AutoFilterMode = False
        End With

        ' Save & Close the file
        wb.Save
        wb.Close False

        ' Move to the next file
        fileName = Dir
    Loop

    ' Restore application settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True

    MsgBox "Data filtering by file name completed!", vbInformation, "Done"
End Sub




Sub RegSummarySplit()
    Dim wbSource As Workbook, wbNew As Workbook
    Dim wsOptions As Worksheet, wsData As Worksheet, wsRegSummary As Worksheet
    Dim folderPath As String, newFilePath As String
    Dim region As String
    Dim lastRow As Long, i As Long
    Dim regionList As Object

    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Set source workbook
    Set wbSource = ThisWorkbook
    Set wsOptions = wbSource.Sheets("Options")

    ' Create folder for filtered files if not exists
    folderPath = wbSource.Path & "\Filtered_Regions\"
    If Dir(folderPath, vbDirectory) = "" Then MkDir folderPath

    ' Get the list of unique regions from column K (starting from K2, skipping "*")
    lastRow = wsOptions.Cells(wsOptions.Rows.Count, "K").End(xlUp).Row
    Set regionList = CreateObject("Scripting.Dictionary")

    For i = 2 To lastRow
        region = Trim(wsOptions.Cells(i, "K").Value)
        If region <> "" And region <> "*" Then
            regionList(region) = True ' Store unique regions
        End If
    Next i

    ' Loop through each unique region
    For Each region In regionList.keys
        ' Create a new copy of the source file
        wbSource.SaveCopyAs folderPath & "RegSummary_" & region & ".xlsx"
        Set wbNew = Workbooks.Open(folderPath & "RegSummary_" & region & ".xlsx")

        ' Delete L3 Summary & L4 Summary sheets if they exist
        On Error Resume Next
        Application.DisplayAlerts = False
        wbNew.Sheets("L3 Summary").Delete
        wbNew.Sheets("L4 Summary").Delete
        Application.DisplayAlerts = True
        On Error GoTo 0

        ' Set worksheet references
        Set wsData = wbNew.Sheets("Data")
        Set wsRegSummary = wbNew.Sheets("Reg Summary")

        ' ---- FILTER & DELETE UNWANTED DATA ----
        With wsData
            .AutoFilterMode = False
            lastRow = .Cells(.Rows.Count, "A").End(xlUp).Row ' Find last row

            ' Apply filter on column LR (assumed column 12) and delete unmatched rows
            .Range("A1").AutoFilter Field:=12, Criteria1:="<>" & region
            On Error Resume Next
            .Range("A2:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow.Delete
            On Error GoTo 0
            .AutoFilterMode = False
        End With

        ' ---- UPDATE REG SUMMARY B1 ----
        wsRegSummary.Range("B1").Value = region

        ' Save & Close the file
        wbNew.Save
        wbNew.Close False
    Next region

    ' Restore application settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True

    ' Cleanup
    Set regionList = Nothing

    MsgBox "Reg Summary split completed!", vbInformation, "Done"
End Sub








Sub FilterAndCleanFiles()
    Dim wsData As Worksheet, wsOptions As Worksheet
    Dim lastRowData As Long, lastRowOptions As Long
    Dim rng As Range, cell As Range
    Dim L3 As String, L4Dict As Object
    Dim NewWorkbook As Workbook, wsNewOptions As Worksheet
    Dim FilePath As String, SaveFolder As String
    Dim ws As Worksheet
    
    ' Disable alerts and screen updating
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    
    ' Set save folder path
    SaveFolder = ThisWorkbook.Path & "\Filtered_Files\"
    
    ' Loop through filtered files
    FilePath = Dir(SaveFolder & "*.xlsx")
    Do While FilePath <> ""
        ' Open the newly created file
        Set NewWorkbook = Workbooks.Open(SaveFolder & FilePath)
        Set wsData = NewWorkbook.Sheets("Data")
        Set wsOptions = NewWorkbook.Sheets("Options")
        
        ' Extract L3 from file name
        L3 = Left(FilePath, Len(FilePath) - 5) ' Remove .xlsx extension
        
        ' Get last row in Options sheet
        lastRowOptions = wsOptions.Cells(wsOptions.Rows.Count, "A").End(xlUp).Row
        
        ' Create dictionary to store unique L4 values
        Set L4Dict = CreateObject("Scripting.Dictionary")
        
        ' Loop through Options sheet to get L4s corresponding to L3
        For Each cell In wsOptions.Range("A2:A" & lastRowOptions)
            If cell.Value = L3 Then
                If Not L4Dict.Exists(cell.Offset(0, 1).Value) And cell.Offset(0, 1).Value <> "" Then
                    L4Dict.Add cell.Offset(0, 1).Value, Nothing
                End If
            End If
        Next cell
        
        ' Clear existing Options sheet and update it
        wsOptions.Cells.Clear
        wsOptions.Range("A1").Value = "L3"
        wsOptions.Range("B1").Value = "L4"
        wsOptions.Range("A2").Value = L3 ' Only the relevant L3
        
        ' Populate L4 values
        wsOptions.Range("B2").Value = "*" ' First entry as *
        If L4Dict.Count > 0 Then
            wsOptions.Range("B3").Resize(L4Dict.Count, 1).Value = Application.Transpose(L4Dict.Keys)
        End If
        
        ' Refresh data & delete "Reg Summary"
        wsData.Activate
        ActiveWorkbook.RefreshAll
        On Error Resume Next
        Set ws = NewWorkbook.Sheets("Reg Summary")
        If Not ws Is Nothing Then ws.Delete
        On Error GoTo 0
        
        ' Save & close workbook
        NewWorkbook.Save
        NewWorkbook.Close False
        
        ' Get next file
        FilePath = Dir
    Loop
    
    ' Re-enable alerts and screen updating
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
    MsgBox "Filtering, cleanup, and dropdown preparation completed successfully!", vbInformation, "Done"
End Sub
