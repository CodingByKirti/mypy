from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
import os

# --- User Inputs ---
file_path = input("Enter the full path to the Excel file: ").strip()
sheet_name = input("Enter the sheet name: ").strip()
target_year = input("Enter the target year (e.g., 2025): ").strip()

# Derive last 2 digits of current and previous year
yy = target_year[-2:]
prev_yy = str(int(yy) - 1).zfill(2)

# --- Load Workbook and Sheet ---
wb = load_workbook(file_path)
if sheet_name not in wb.sheetnames:
    raise ValueError(f"Sheet '{sheet_name}' not found in workbook.")

ws = wb[sheet_name]

# --- Identify the "Period Month" column ---
header_row = None
period_col_index = None

for row in ws.iter_rows(min_row=1, max_row=1, values_only=True):
    header_row = row
    for idx, col_name in enumerate(row):
        if col_name == "Period Month":
            period_col_index = idx
            break

if period_col_index is None:
    raise ValueError("'Period Month' column not found in the sheet.")

# --- Filter Rows ---
rows_to_keep = []
rows_to_keep.append([cell.value for cell in ws[1]])  # Keep header

for row in ws.iter_rows(min_row=2, values_only=True):
    period_value = row[period_col_index]
    if not period_value or not isinstance(period_value, str):
        continue
    # Match format like 'Jan 25', 'Mar 24', etc.
    if period_value.strip()[-2:] == yy and not period_value.strip()[-2:] == prev_yy:
        rows_to_keep.append(list(row))

# --- Clear sheet and write filtered rows ---
ws.delete_rows(2, ws.max_row)  # Keep header only, remove rest

for i, row_data in enumerate(rows_to_keep[1:], start=2):  # Start writing from row 2
    for j, value in enumerate(row_data, start=1):
        ws.cell(row=i, column=j, value=value)

# --- Save updated workbook ---
new_file_path = os.path.splitext(file_path)[0] + f"_filtered_{yy}.xlsx"
wb.save(new_file_path)

print(f"Filtered data saved to: {new_file_path}")


.......................................

import pandas as pd

def enrich_billing_entity_info(main_df: pd.DataFrame, last_month_df: pd.DataFrame, ospd_df: pd.DataFrame) -> pd.DataFrame:
    # Normalize BPCC and LE_Description
    def normalize_bpcc(series):
        return series.astype(str).str.strip().str.lstrip('0').str.upper()

    main_df['__BPCC_tmp'] = normalize_bpcc(main_df['Business Partner Cost Center'])
    last_month_df['__BPCC_tmp'] = normalize_bpcc(last_month_df['Business Partner Cost Center'])
    ospd_df['__BPCC_tmp'] = normalize_bpcc(ospd_df['CC_ID'])

    # Normalize LE_Description
    ospd_df['__LE_tmp'] = ospd_df['LE_Description'].astype(str).str.strip().str.upper()

    # Initialize columns
    if 'Comment' not in main_df.columns:
        main_df['Comment'] = ""
    main_df['Billing Entity name as per OSPD'] = ""

    # Set for faster lookup
    bpcc_last_month_set = set(last_month_df['__BPCC_tmp'])
    bpcc_ospd_set = set(ospd_df['__BPCC_tmp'])

    for idx, row in main_df.iterrows():
        bpcc = row['__BPCC_tmp']
        billing_entity = str(row['Billing Entity']).replace("_", " ").strip().upper()

        # Case 1: BPCC not found in OSPD
        if bpcc not in bpcc_ospd_set:
            main_df.at[idx, 'Comment'] = "No BPCC found in OSPD."
            continue

        # Case 2: New BPCC (not in last month file)
        if bpcc not in bpcc_last_month_set:
            matching_ospd_entries = ospd_df[ospd_df['__BPCC_tmp'] == bpcc]['__LE_tmp'].unique()

            # Join all expected LE_Descriptions from OSPD
            combined_le = " | ".join(sorted(set(matching_ospd_entries)))
            main_df.at[idx, 'Billing Entity name as per OSPD'] = combined_le

            # Compare with cleaned Billing Entity from main_df
            if billing_entity not in matching_ospd_entries:
                comment = f"New BPCC found. Billing Entity mismatch. Expected from OSPD: {combined_le}"
                main_df.at[idx, 'Comment'] = comment

    # Cleanup temporary columns
    main_df.drop(columns=['__BPCC_tmp'], inplace=True)
    return main_df
