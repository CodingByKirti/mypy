import xlwings as xw

def fix_product_control_xlwings(file_path, sheet_name="Data", header_row=2):
    """
    Open the workbook, update 'Business Framework Group' to
    'L3 - Financial Control & Tax' for 'PRODUCT CONTROL' rows,
    save and close.
    """

    app = xw.App(visible=False)
    try:
        wb = app.books.open(file_path)
        ws = wb.sheets[sheet_name]

        # Get headers
        headers = ws.range((header_row, 1)).expand('right').value

        try:
            bf_col_idx = headers.index("Business Framework") + 1
            bfg_col_idx = headers.index("Business Framework Group") + 1
        except ValueError as e:
            print("❌ One of the required columns was not found in the headers.")
            return

        # Get data range below header
        last_row = ws.cells.last_cell.row
        used_range = ws.range((header_row + 1, bf_col_idx), (last_row, bf_col_idx)).expand('down')
        data_rows = used_range.rows.count

        fix_count = 0

        for i in range(data_rows):
            row_idx = header_row + 1 + i
            bf_value = ws.range((row_idx, bf_col_idx)).value
            bfg_value = ws.range((row_idx, bfg_col_idx)).value

            if isinstance(bf_value, str) and bf_value.strip().upper() == "PRODUCT CONTROL":
                if bfg_value != "L3 - Financial Control & Tax":
                    ws.range((row_idx, bfg_col_idx)).value = "L3 - Financial Control & Tax"
                    fix_count += 1

        wb.save()
        print(f"✅ Fixed {fix_count} PRODUCT CONTROL rows and saved: {file_path}")

    finally:
        wb.close()
        app.quit()

# Example usage
fix_product_control_xlwings(
    file_path="your_file.xlsx",
    sheet_name="Data",
    header_row=2  # adjust if header is somewhere else
)
;;;;;;;;;
import xlwings as xw

def fix_product_control_xlwings(file_path, header_row, rows_to_fix):
    app = xw.App(visible=False)
    wb = app.books.open(file_path)
    ws = wb.sheets["Data"]

    headers = ws.range((header_row, 1)).expand('right').value

    bf_col_idx = headers.index("Business Framework") + 1
    bfg_col_idx = headers.index("Business Framework Group") + 1

    for idx in rows_to_fix:
        excel_row = header_row + 1 + idx  # pandas index to Excel row
        ws.range((excel_row, bfg_col_idx)).value = "L3 - Financial Control & Tax"

    wb.save()
    wb.close()
    app.quit()

# Example usage
rows_to_fix = to_fix.index.tolist()
fix_product_control_xlwings("your_file.xlsx", header_row=2, rows_to_fix=rows_to_fix)
-----------------------------------------
import xlwings as xw

def fix_product_control_xlwings(file_path, sheet_name, header_row):
    app = xw.App(visible=False)
    wb = app.books.open(file_path)
    ws = wb.sheets[sheet_name]

    headers = ws.range((header_row, 1)).expand('right').value

    try:
        bf_col_idx = headers.index("Business Framework") + 1
        bfg_col_idx = headers.index("Business Framework Group") + 1
    except ValueError:
        app.quit()
        raise Exception("One or both columns not found!")

    last_row = ws.cells.last_cell.row

    changed_count = 0

    for row in range(header_row + 1, last_row + 1):
        bf_val = ws.range((row, bf_col_idx)).value
        bfg_val = ws.range((row, bfg_col_idx)).value

        if isinstance(bf_val, str) and bf_val.strip().upper() == "PRODUCT CONTROL":
            if isinstance(bfg_val, str) and bfg_val.strip() != "L3 - Financial Control & Tax":
                ws.range((row, bfg_col_idx)).value = "L3 - Financial Control & Tax"
                changed_count += 1

    print(f"✅ Updated {changed_count} rows for PRODUCT CONTROL.")

    fixed_file = file_path.replace(".xlsx", "_product_control_fixed.xlsx")
    wb.save(fixed_file)
    wb.close()
    app.quit()

    print(f"✅ File saved: {fixed_file}")
    return fixed_file

# Example usage:
fix_product_control_xlwings(
    file_path="your_file.xlsx",
    sheet_name="Data",
    header_row=2  # Adjust if your header is on row 2
)

.......................................

import pandas as pd

def enrich_billing_entity_info(main_df: pd.DataFrame, last_month_df: pd.DataFrame, ospd_df: pd.DataFrame) -> pd.DataFrame:
    # Normalize BPCC and LE_Description
    def normalize_bpcc(series):
        return series.astype(str).str.strip().str.lstrip('0').str.upper()

    main_df['__BPCC_tmp'] = normalize_bpcc(main_df['Business Partner Cost Center'])
    last_month_df['__BPCC_tmp'] = normalize_bpcc(last_month_df['Business Partner Cost Center'])
    ospd_df['__BPCC_tmp'] = normalize_bpcc(ospd_df['CC_ID'])

    # Normalize LE_Description
    ospd_df['__LE_tmp'] = ospd_df['LE_Description'].astype(str).str.strip().str.upper()

    # Initialize columns
    if 'Comment' not in main_df.columns:
        main_df['Comment'] = ""
    main_df['Billing Entity name as per OSPD'] = ""

    # Set for faster lookup
    bpcc_last_month_set = set(last_month_df['__BPCC_tmp'])
    bpcc_ospd_set = set(ospd_df['__BPCC_tmp'])

    for idx, row in main_df.iterrows():
        bpcc = row['__BPCC_tmp']
        billing_entity = str(row['Billing Entity']).replace("_", " ").strip().upper()

        # Case 1: BPCC not found in OSPD
        if bpcc not in bpcc_ospd_set:
            main_df.at[idx, 'Comment'] = "No BPCC found in OSPD."
            continue

        # Case 2: New BPCC (not in last month file)
        if bpcc not in bpcc_last_month_set:
            matching_ospd_entries = ospd_df[ospd_df['__BPCC_tmp'] == bpcc]['__LE_tmp'].unique()

            # Join all expected LE_Descriptions from OSPD
            combined_le = " | ".join(sorted(set(matching_ospd_entries)))
            main_df.at[idx, 'Billing Entity name as per OSPD'] = combined_le

            # Compare with cleaned Billing Entity from main_df
            if billing_entity not in matching_ospd_entries:
                comment = f"New BPCC found. Billing Entity mismatch. Expected from OSPD: {combined_le}"
                main_df.at[idx, 'Comment'] = comment

    # Cleanup temporary columns
    main_df.drop(columns=['__BPCC_tmp'], inplace=True)
    return main_df
