import xlwings as xw
import os
import shutil
import pandas as pd

def run_task_two():
    master_file = "Base_Dashboard.xlsx"
    report_names = [
        "Investor Relations",
        "Stress Testing",
        "APEX (FC)",
        "Finance COO",
        "Financial Support"
    ]

    sheets_and_cells = [
        ("Index", "D3"),
        ("Summary", "D3"),
        ("P&L Item View", "B3"),
        ("DC by Country", "B3"),
        ("Headcount by Country", "B3"),
        ("Driller", "B3")
    ]

    with xw.App(visible=False) as app:
        wb_master = app.books.open(master_file)
        month_text = wb_master.sheets['Dates'].range('C4').value  # e.g. 'May-25'
        month_part, yy_part = month_text.split('-')
        year_full = "20" + yy_part
        month_year = f"{month_part} {year_full}"
        output_folder = f"Cost_Templates_{month_part}"
        os.makedirs(output_folder, exist_ok=True)

        reporting_sheet_name = next(
            (sh.name for sh in wb_master.sheets if 'Reporting' in sh.name),
            None
        )
        wb_master.close()

        if not reporting_sheet_name:
            raise ValueError("No sheet with 'Reporting' found.")

        for report_name in report_names:
            output_file = os.path.join(output_folder, f"Dashboard_{report_name}.xlsx")
            shutil.copyfile(master_file, output_file)

            wb = app.books.open(output_file)
            ws_data = wb.sheets['Data']

            # Read full data including headers into pandas
            used_range = ws_data.used_range
            data = used_range.value
            df = pd.DataFrame(data[1:], columns=data[0])  # Skip header row in data

            if 'Report Name' not in df.columns:
                raise ValueError("'Report Name' column not found in Data sheet.")

            # Filter by report_name
            filtered_df = df[df['Report Name'] == report_name]

            # Clear only data (keep header)
            ws_data.range("A2").expand('table').clear_contents()

            # Write filtered data starting at A2
            if not filtered_df.empty:
                ws_data.range("A2").value = filtered_df.values.tolist()

            # Rename Reporting sheet
            new_reporting_name = f"{month_year} Reporting"
            wb.sheets[reporting_sheet_name].name = new_reporting_name
            reporting_ws = wb.sheets[new_reporting_name]
            reporting_ws.range("C20").value = report_name
            reporting_ws.range("B25").value = f"{month_year} Results"

            for sheet_name, cell in sheets_and_cells:
                ws = wb.sheets[sheet_name]
                ws.range(cell).value = report_name

            wb.save()
            wb.close()

        print("âœ… All filtered reports created successfully!")

if __name__ == "__main__":
    run_task_two()
import tkinter as tk
from tkinter import filedialog
import sys

def select_excel_file():
    while True:
        root = tk.Tk()
        root.withdraw()

        file_path = filedialog.askopenfilename(
            title="Select an Excel file",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )

        if file_path:
            print("Selected file:", file_path)
            return file_path
        else:
            retry = input("No file selected. Do you want to try again? (y/n): ").strip().lower()
            if retry != 'y':
                print("Exiting program.")
                sys.exit()

# Usage
excel_file = select_excel_file()



import numpy as np
import pandas as pd

def convert_mixed_columns(df, columns):
    """
    Converts specified columns:
    - If value is alphanumeric (contains letters), keep as string.
    - If value is numeric only, convert to integer.

    Args:
        df (pd.DataFrame): Input DataFrame
        columns (list): List of column names to process

    Returns:
        pd.DataFrame: Modified DataFrame
    """
    df = df.copy()  # avoid modifying original

    for col in columns:
        col_str = df[col].astype(str).str.strip()
        is_alpha = col_str.str.contains('[A-Za-z]', regex=True)

        df[col] = np.where(
            is_alpha,
            col_str,  # keep as string
            pd.to_numeric(col_str, errors='coerce').fillna(0).astype(int)  # convert to int
        )

    return df


def clean_column_headers(df: pd.DataFrame) -> pd.DataFrame:
    def clean_name(col):
        col = str(col).strip()
        col = ' '.join(col.split())  # remove extra spaces in between
        if col.strip().upper() == 'YTD12':
            return 'YTD12'
        return col.title()  # convert to Title Case

    df.columns = [clean_name(col) for col in df.columns]
    return df



import pandas as pd

def apply_observations(d1: pd.DataFrame) -> pd.DataFrame:
    # Ensure relevant columns are strings where needed
    d1['Category for Static'] = d1['Category for Static'].astype(str).str.strip()
    d1['Lookup for Billed CC'] = d1['Lookup for Billed CC'].astype(str).str.strip().str.lower().replace('nan', '')
    d1['Check'] = d1['Check'].astype(str).str.strip().str.lower()
    
    # Make sure Observation & Comment exist
    if 'Observation' not in d1.columns:
        d1['Observation'] = ''
    if 'Comment' not in d1.columns:
        d1['Comment'] = ''

    # --------------------
    # ðŸ“Œ Billed
    mask_billed = d1['Category for Static'].str.lower() == 'billed'

    # 1) FTE mismatch
    mask_fte_mismatch = mask_billed & (d1['Employee FTE'] != d1['No. of FTE'])
    d1.loc[mask_fte_mismatch, 'Comment'] = 'values are not same'

    # 2) Employee FTE not 0/1 & No. of FTE = 1
    mask_fte_neither_0_1 = mask_billed & (~d1['Employee FTE'].isin([0,1])) & (d1['No. of FTE'] == 1)
    d1.loc[mask_fte_neither_0_1, 'Observation'] = 'Update FTE value to 1'

    # 3) Employee FTE == 0 & Class == Employee
    mask_fte_zero_employee = mask_billed & (d1['Employee FTE'] == 0) & (d1['Employee Class'].str.lower() == 'employee')
    d1.loc[mask_fte_zero_employee, 'Observation'] = 'Update FTE value to 1'

    # --------------------
    # ðŸ“Œ Not Billed
    mask_not_billed = d1['Category for Static'].str.lower() == 'not billed'

    # 1) Lookup for Billed CC not blank/n/a
    mask_lookup_not_blank = mask_not_billed & (d1['Lookup for Billed CC'] != '') & (d1['Lookup for Billed CC'] != 'n/a')
    d1.loc[mask_lookup_not_blank, 'Observation'] = 'Exclude'

    # 2) Lookup blank/n/a & Check True
    mask_lookup_blank_check_true = mask_not_billed & (d1['Lookup for Billed CC'].isin(['', 'n/a'])) & (d1['Check'] == 'true')
    d1.loc[mask_lookup_blank_check_true, 'Observation'] = 'Ok'

    # --------------------
    # ðŸ“Œ Others
    mask_others = d1['Category for Static'].str.lower() == 'others'

    # 1) External + Check True + GCB == Not Applicable
    mask1 = (
        mask_others &
        (d1['Employee Class'].str.lower() == 'external') &
        (d1['Check'] == 'true') &
        (d1['Global Career Band'].str.strip().str.lower() == 'not applicable')
    )
    d1.loc[mask1, 'Observation'] = 'Ok'

    # 2) External + Check True + GCB != Not Applicable + Lookup not blank/n/a
    mask2 = (
        mask_others &
        (d1['Employee Class'].str.lower() == 'external') &
        (d1['Check'] == 'true') &
        (d1['Global Career Band'].str.strip().str.lower() != 'not applicable') &
        (d1['Lookup for Billed CC'] != '') & (d1['Lookup for Billed CC'] != 'n/a')
    )
    d1.loc[mask2, 'Observation'] = 'Exclude'

    # 3) Intern + Lookup not blank/n/a + GCB != Not Applicable
    mask3 = (
        mask_others &
        (d1['Employee Class'].str.lower() == 'intern') &
        (d1['Lookup for Billed CC'] != '') & (d1['Lookup for Billed CC'] != 'n/a') &
        (d1['Global Career Band'].str.strip().str.lower() != 'not applicable')
    )
    d1.loc[mask3, 'Observation'] = 'Exclude'

    # 4) Intern + GCB == Not Applicable
    mask4 = (
        mask_others &
        (d1['Employee Class'].str.lower() == 'intern') &
        (d1['Global Career Band'].str.strip().str.lower() == 'not applicable')
    )
    d1.loc[mask4, 'Observation'] = 'Ok'

    # 5) Employee + GCB in [3, MD]
    mask5 = (
        mask_others &
        (d1['Employee Class'].str.lower() == 'employee') &
        (d1['Global Career Band'].astype(str).str.strip().isin(['3', 'MD']))
    )
    d1.loc[mask5, 'Observation'] = 'Ok'

    return d1
----------------------------------
import tkinter as tk
from tkinter import filedialog

def ask_user_to_select_folder():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    folder_path = filedialog.askdirectory(title="Select a Folder")
    return folder_path

# Example usage
selected_folder = ask_user_to_select_folder()
print("Selected folder:", selected_folder)

..


def safe_float(val):
    try:
        # Convert to string and strip commas and spaces
        val_str = str(val).replace(',', '').strip()
        # Skip typical error strings
        if val_str.upper() in ['#VALUE!', '#DIV/0!', 'RECALC_ERROR', 'N/A', 'NA', '', 'â€“']:
            return 0.0
        return float(val_str)
    except:
        return 0.0



ytd_value = sum(
    float(row[f'M{month:02d} {curr_year}']) 
    for month in range(1, curr_month + 1)
    if f'M{month:02d} {curr_year}' in sheet.columns 
    and pd.notna(row[f'M{month:02d} {curr_year}'])
)

or

ytd_value = sum(
    float(row[f'M{month:02d} {curr_year}']) 
    for month in range(1, curr_month + 1)
    if f'M{month:02d} {curr_year}' in sheet.columns 
    and pd.notna(row[f'M{month:02d} {curr_year}'])
)

or

ytd_value = sum(
    float(row[f'M{month:02d} {curr_year}']) 
    for month in range(1, curr_month + 1)
    if f'M{month:02d} {curr_year}' in sheet.columns 
    and isinstance(row[f'M{month:02d} {curr_year}'], (int, float))
)



also
Period_value = f"{month_number_to_name(curr_month)} â€“{str(curr_year)[-2:0]}"
should be

Period_value = f"{month_number_to_name(curr_month)} â€“{str(curr_year)[-2:]}"



import xlwings as xw

from openpyxl import load_workbook

def fix_product_control_openpyxl(file_path, sheet_name="Data", header_row_number=2):
    """
    Uses openpyxl to loop over rows in the sheet,
    fix PRODUCT CONTROL's Business Framework Group in-place,
    then save the file.
    """

    wb = load_workbook(file_path)
    ws = wb[sheet_name]

    # --- Get headers ---
    header_row = [cell.value.strip() if cell.value else None for cell in ws[header_row_number]]

    try:
        bf_col_index = header_row.index("Business Framework")
        bfg_col_index = header_row.index("Business Framework Group")
    except ValueError:
        raise ValueError("'Business Framework' or 'Business Framework Group' column not found!")

    # --- Loop rows ---
    fix_count = 0

    for row in ws.iter_rows(min_row=header_row_number + 1):
        bf_cell = row[bf_col_index]
        bfg_cell = row[bfg_col_index]

        bf_value = str(bf_cell.value).strip().upper() if bf_cell.value else ""
        bfg_value = str(bfg_cell.value).strip() if bfg_cell.value else ""

        if bf_value == "PRODUCT CONTROL" and bfg_value != "L3 - Financial Control & Tax":
            bfg_cell.value = "L3 - Financial Control & Tax"
            fix_count += 1

    wb.save(file_path)
    wb.close()

    print(f"âœ… Fixed {fix_count} PRODUCT CONTROL rows and saved: {file_path}")

;;;;;;;;;
import xlwings as xw

def fix_product_control_xlwings(file_path, header_row, rows_to_fix):
    app = xw.App(visible=False)
    wb = app.books.open(file_path)
    ws = wb.sheets["Data"]

    headers = ws.range((header_row, 1)).expand('right').value

    bf_col_idx = headers.index("Business Framework") + 1
    bfg_col_idx = headers.index("Business Framework Group") + 1

    for idx in rows_to_fix:
        excel_row = header_row + 1 + idx  # pandas index to Excel row
        ws.range((excel_row, bfg_col_idx)).value = "L3 - Financial Control & Tax"

    wb.save()
    wb.close()
    app.quit()

# Example usage
rows_to_fix = to_fix.index.tolist()
fix_product_control_xlwings("your_file.xlsx", header_row=2, rows_to_fix=rows_to_fix)
-----------------------------------------
import xlwings as xw

def fix_product_control_xlwings(file_path, sheet_name, header_row):
    app = xw.App(visible=False)
    wb = app.books.open(file_path)
    ws = wb.sheets[sheet_name]

    headers = ws.range((header_row, 1)).expand('right').value

    try:
        bf_col_idx = headers.index("Business Framework") + 1
        bfg_col_idx = headers.index("Business Framework Group") + 1
    except ValueError:
        app.quit()
        raise Exception("One or both columns not found!")

    last_row = ws.cells.last_cell.row

    changed_count = 0

    for row in range(header_row + 1, last_row + 1):
        bf_val = ws.range((row, bf_col_idx)).value
        bfg_val = ws.range((row, bfg_col_idx)).value

        if isinstance(bf_val, str) and bf_val.strip().upper() == "PRODUCT CONTROL":
            if isinstance(bfg_val, str) and bfg_val.strip() != "L3 - Financial Control & Tax":
                ws.range((row, bfg_col_idx)).value = "L3 - Financial Control & Tax"
                changed_count += 1

    print(f"âœ… Updated {changed_count} rows for PRODUCT CONTROL.")

    fixed_file = file_path.replace(".xlsx", "_product_control_fixed.xlsx")
    wb.save(fixed_file)
    wb.close()
    app.quit()

    print(f"âœ… File saved: {fixed_file}")
    return fixed_file

# Example usage:
fix_product_control_xlwings(
    file_path="your_file.xlsx",
    sheet_name="Data",
    header_row=2  # Adjust if your header is on row 2
)

.......................................

import pandas as pd

def enrich_billing_entity_info(main_df: pd.DataFrame, last_month_df: pd.DataFrame, ospd_df: pd.DataFrame) -> pd.DataFrame:
    # Normalize BPCC and LE_Description
    def normalize_bpcc(series):
        return series.astype(str).str.strip().str.lstrip('0').str.upper()

    main_df['__BPCC_tmp'] = normalize_bpcc(main_df['Business Partner Cost Center'])
    last_month_df['__BPCC_tmp'] = normalize_bpcc(last_month_df['Business Partner Cost Center'])
    ospd_df['__BPCC_tmp'] = normalize_bpcc(ospd_df['CC_ID'])

    # Normalize LE_Description
    ospd_df['__LE_tmp'] = ospd_df['LE_Description'].astype(str).str.strip().str.upper()

    # Initialize columns
    if 'Comment' not in main_df.columns:
        main_df['Comment'] = ""
    main_df['Billing Entity name as per OSPD'] = ""

    # Set for faster lookup
    bpcc_last_month_set = set(last_month_df['__BPCC_tmp'])
    bpcc_ospd_set = set(ospd_df['__BPCC_tmp'])

    for idx, row in main_df.iterrows():
        bpcc = row['__BPCC_tmp']
        billing_entity = str(row['Billing Entity']).replace("_", " ").strip().upper()

        # Case 1: BPCC not found in OSPD
        if bpcc not in bpcc_ospd_set:
            main_df.at[idx, 'Comment'] = "No BPCC found in OSPD."
            continue

        # Case 2: New BPCC (not in last month file)
        if bpcc not in bpcc_last_month_set:
            matching_ospd_entries = ospd_df[ospd_df['__BPCC_tmp'] == bpcc]['__LE_tmp'].unique()

            # Join all expected LE_Descriptions from OSPD
            combined_le = " | ".join(sorted(set(matching_ospd_entries)))
            main_df.at[idx, 'Billing Entity name as per OSPD'] = combined_le

            # Compare with cleaned Billing Entity from main_df
            if billing_entity not in matching_ospd_entries:
                comment = f"New BPCC found. Billing Entity mismatch. Expected from OSPD: {combined_le}"
                main_df.at[idx, 'Comment'] = comment

    # Cleanup temporary columns
    main_df.drop(columns=['__BPCC_tmp'], inplace=True)
    return main_df
