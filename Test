import pandas as pd

def flag_duplicate_billing_names(df: pd.DataFrame) -> pd.DataFrame:
    name_col = 'Billing Contact Name'
    psid_col = 'Billing Contact PS ID'
    comment_col = 'Comment'

    if name_col not in df.columns or psid_col not in df.columns:
        raise KeyError("Missing required columns in the dataframe.")

    if comment_col not in df.columns:
        df[comment_col] = ""

    # --------- CASE 1: Same PS ID with multiple names ---------
    psid_groups = df.groupby(psid_col)[name_col].unique().reset_index()

    for _, row in psid_groups.iterrows():
        psid = row[psid_col]
        names = [str(n).strip() for n in row[name_col] if pd.notna(n)]
        if len(names) <= 1:
            continue

        norm_names = [n.lower() for n in names]
        unique_names = list(set(norm_names))
        if len(unique_names) == 1:
            continue  # All names are effectively same

        # Separate email and name
        email_names = [n for n in names if '@' in n]
        plain_names = [n for n in names if '@' not in n]

        has_similar_name_email_pair = False
        for name in plain_names:
            name_words = name.lower().split()
            for email in email_names:
                if all(word in email.lower() for word in name_words):
                    has_similar_name_email_pair = True
                    break
            if has_similar_name_email_pair:
                break

        # NEW: if unrelated names exist along with similar email-name pairs
        if len(set(plain_names)) > 2:
            final_comment = 'Same PS ID has unrelated names (likely different people).'
        elif has_similar_name_email_pair:
            final_comment = 'Duplicate name against same PS ID, might be same person.'
        else:
            final_comment = 'Same PS ID has unrelated names (likely different people).'

        idxs = df[df[psid_col] == psid].index
        for idx in idxs:
            df.at[idx, comment_col] = final_comment

    # --------- CASE 2: Same name appears with multiple PS IDs ---------
    name_groups = df.groupby(name_col)[psid_col].nunique().reset_index()
    suspicious_names = name_groups[name_groups[psid_col] > 1][name_col]

    for name in suspicious_names:
        idxs = df[df[name_col] == name].index
        for idx in idxs:
            existing = str(df.at[idx, comment_col])
            if not existing.strip():
                df.at[idx, comment_col] = 'Same contact name appears with multiple PS IDs.'

    return df