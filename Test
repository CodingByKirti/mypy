import pandas as pd

def delete_previous_year_rows(df, period_col, target_year):
    prev_yy = str(int(target_year[-2:]) - 1).zfill(2)
    mask = df[period_col].astype(str).str.strip().str[-2:] != prev_yy
    dropped_rows = (~mask).sum()
    df_cleaned = df[mask]
    print(f"✅ Deleted {dropped_rows} rows for year ending with {prev_yy}.")
    return df_cleaned

def fix_product_control(df):
    mask = df["Business Framework"].astype(str).str.strip().str.upper() == "PRODUCT CONTROL"
    wrong_group = df["Business Framework Group"] != "L3 - Financial Control & Tax"
    to_fix = mask & wrong_group
    fix_count = to_fix.sum()
    df.loc[to_fix, "Business Framework Group"] = "L3 - Financial Control & Tax"
    print(f"✅ Fixed {fix_count} PRODUCT CONTROL rows.")
    return df

def clean_data_sheet(file_path, sheet_name, header_row, target_year, fix_product=True):
    df = pd.read_excel(file_path, sheet_name=sheet_name, header=header_row - 1)

    # 1️⃣ Delete previous year rows
    df = delete_previous_year_rows(df, "Period Month", target_year)

    # 2️⃣ Optionally fix PRODUCT CONTROL
    if fix_product:
        df = fix_product_control(df)

    # 3️⃣ Save back
    cleaned_file = file_path.replace(".xlsx", f"_cleaned_{target_year}.xlsx")
    with pd.ExcelWriter(cleaned_file, engine="openpyxl", mode="w") as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False, startrow=header_row - 1)

    print(f"✅ Cleaned file saved to: {cleaned_file}")
    return cleaned_file

# Example usage:
clean_data_sheet(
    file_path="your_file.xlsx",
    sheet_name="Data",
    header_row=2,
    target_year="2025",
    fix_product=True  # Set False if you want to skip the PRODUCT CONTROL fix later
)

-----------------------------------------
import xlwings as xw

def fix_product_control_xlwings(file_path, sheet_name, header_row):
    app = xw.App(visible=False)
    wb = app.books.open(file_path)
    ws = wb.sheets[sheet_name]

    headers = ws.range((header_row, 1)).expand('right').value

    try:
        bf_col_idx = headers.index("Business Framework") + 1
        bfg_col_idx = headers.index("Business Framework Group") + 1
    except ValueError:
        app.quit()
        raise Exception("One or both columns not found!")

    last_row = ws.cells.last_cell.row

    changed_count = 0

    for row in range(header_row + 1, last_row + 1):
        bf_val = ws.range((row, bf_col_idx)).value
        bfg_val = ws.range((row, bfg_col_idx)).value

        if isinstance(bf_val, str) and bf_val.strip().upper() == "PRODUCT CONTROL":
            if isinstance(bfg_val, str) and bfg_val.strip() != "L3 - Financial Control & Tax":
                ws.range((row, bfg_col_idx)).value = "L3 - Financial Control & Tax"
                changed_count += 1

    print(f"✅ Updated {changed_count} rows for PRODUCT CONTROL.")

    fixed_file = file_path.replace(".xlsx", "_product_control_fixed.xlsx")
    wb.save(fixed_file)
    wb.close()
    app.quit()

    print(f"✅ File saved: {fixed_file}")
    return fixed_file

# Example usage:
fix_product_control_xlwings(
    file_path="your_file.xlsx",
    sheet_name="Data",
    header_row=2  # Adjust if your header is on row 2
)

.......................................

import pandas as pd

def enrich_billing_entity_info(main_df: pd.DataFrame, last_month_df: pd.DataFrame, ospd_df: pd.DataFrame) -> pd.DataFrame:
    # Normalize BPCC and LE_Description
    def normalize_bpcc(series):
        return series.astype(str).str.strip().str.lstrip('0').str.upper()

    main_df['__BPCC_tmp'] = normalize_bpcc(main_df['Business Partner Cost Center'])
    last_month_df['__BPCC_tmp'] = normalize_bpcc(last_month_df['Business Partner Cost Center'])
    ospd_df['__BPCC_tmp'] = normalize_bpcc(ospd_df['CC_ID'])

    # Normalize LE_Description
    ospd_df['__LE_tmp'] = ospd_df['LE_Description'].astype(str).str.strip().str.upper()

    # Initialize columns
    if 'Comment' not in main_df.columns:
        main_df['Comment'] = ""
    main_df['Billing Entity name as per OSPD'] = ""

    # Set for faster lookup
    bpcc_last_month_set = set(last_month_df['__BPCC_tmp'])
    bpcc_ospd_set = set(ospd_df['__BPCC_tmp'])

    for idx, row in main_df.iterrows():
        bpcc = row['__BPCC_tmp']
        billing_entity = str(row['Billing Entity']).replace("_", " ").strip().upper()

        # Case 1: BPCC not found in OSPD
        if bpcc not in bpcc_ospd_set:
            main_df.at[idx, 'Comment'] = "No BPCC found in OSPD."
            continue

        # Case 2: New BPCC (not in last month file)
        if bpcc not in bpcc_last_month_set:
            matching_ospd_entries = ospd_df[ospd_df['__BPCC_tmp'] == bpcc]['__LE_tmp'].unique()

            # Join all expected LE_Descriptions from OSPD
            combined_le = " | ".join(sorted(set(matching_ospd_entries)))
            main_df.at[idx, 'Billing Entity name as per OSPD'] = combined_le

            # Compare with cleaned Billing Entity from main_df
            if billing_entity not in matching_ospd_entries:
                comment = f"New BPCC found. Billing Entity mismatch. Expected from OSPD: {combined_le}"
                main_df.at[idx, 'Comment'] = comment

    # Cleanup temporary columns
    main_df.drop(columns=['__BPCC_tmp'], inplace=True)
    return main_df
