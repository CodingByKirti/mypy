' Store file and folder paths
Public selectedFile As String
Public outputFolder As String

Sub SelectSourceFile()
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    
    With fd
        .Title = "Select the source Excel file"
        .Filters.Clear
        .Filters.Add "Excel Files", "*.xlsx; *.xlsm"
        If .Show = -1 Then
            selectedFile = .SelectedItems(1)
            MsgBox "Selected File: " & selectedFile, vbInformation
        End If
    End With
End Sub

Sub SelectOutputFolder()
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    
    With fd
        .Title = "Choose where to save split files"
        If .Show = -1 Then
            outputFolder = .SelectedItems(1)
            MsgBox "Output Folder: " & outputFolder, vbInformation
        End If
    End With
End Sub

Sub RunSplitByColI()
    If selectedFile = "" Or outputFolder = "" Then
        MsgBox "Please select both the file and output folder.", vbExclamation
        Exit Sub
    End If

    Dim fso As Object: Set fso = CreateObject("Scripting.FileSystemObject")
    Dim wb As Workbook, wbCopy As Workbook
    Dim ws As Worksheet
    Dim val As Variant, vals As Collection
    Dim fileName As String
    Dim cell As Range

    Set wb = Workbooks.Open(selectedFile)
    Set ws = wb.Sheets("Options")

    Set vals = New Collection
    On Error Resume Next
    For Each cell In ws.Range("I2:I" & ws.Cells(ws.Rows.Count, "I").End(xlUp).Row)
        If cell.Value <> "" Then vals.Add cell.Value, CStr(cell.Value)
    Next
    On Error GoTo 0

    For Each val In vals
        fileName = outputFolder & "\" & val & ".xlsm"
        fso.CopyFile selectedFile, fileName
        Set wbCopy = Workbooks.Open(fileName)

        Application.DisplayAlerts = False
        On Error Resume Next
        wbCopy.Sheets("L3 View").Delete
        wbCopy.Sheets("L4 View").Delete
        On Error GoTo 0
        Application.DisplayAlerts = True

        wbCopy.Save
        wbCopy.Close False
    Next

    wb.Close False
    MsgBox "✅ Done! Files saved to: " & outputFolder, vbInformation
End Sub

Sub OpenOutputFolder()
    If outputFolder <> "" Then
        Shell "explorer.exe """ & outputFolder & """", vbNormalFocus
    Else
        MsgBox "Please select the output folder first.", vbExclamation
    End If
End Sub







------------------

'Module-level variables
Public selectedFile As String
Public outputFolder As String

'Select file button
Sub SelectSourceFile()
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    
    With fd
        .Title = "Select source Excel file"
        .Filters.Clear
        .Filters.Add "Excel Files", "*.xlsx;*.xlsm"
        If .Show = -1 Then
            selectedFile = .SelectedItems(1)
            MsgBox "Selected File: " & selectedFile, vbInformation
        End If
    End With
End Sub

'select folder button
Sub SelectOutputFolder()
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFolderPicker)
    
    With fd
        .Title = "Choose where to save split files"
        If .Show = -1 Then
            outputFolder = .SelectedItems(1)
            MsgBox "Output Folder Set: " & outputFolder, vbInformation
        End If
    End With
End Sub


' run split
Sub RunSplitByColI()
    If selectedFile = "" Or outputFolder = "" Then
        MsgBox "Please select both a file and an output folder.", vbExclamation
        Exit Sub
    End If
    
    Dim fso As Object: Set fso = CreateObject("Scripting.FileSystemObject")
    Dim wb As Workbook, wbCopy As Workbook
    Dim tempPath As String, fileName As String
    Dim ws As Worksheet, val As Variant, vals As Collection
    Dim newPath As String

    Set wb = Workbooks.Open(selectedFile)
    Set ws = wb.Sheets("Options")

    Set vals = New Collection
    On Error Resume Next
    For Each cell In ws.Range("I2:I" & ws.Cells(ws.Rows.Count, "I").End(xlUp).Row)
        If cell.Value <> "" Then vals.Add cell.Value, CStr(cell.Value)
    Next
    On Error GoTo 0

    For Each val In vals
        fileName = outputFolder & "\" & val & ".xlsm"
        fso.CopyFile selectedFile, fileName
        
        Set wbCopy = Workbooks.Open(fileName)
        On Error Resume Next
        Application.DisplayAlerts = False
        wbCopy.Sheets("L3 View").Delete
        wbCopy.Sheets("L4 View").Delete
        Application.DisplayAlerts = True
        On Error GoTo 0
        
        wbCopy.Save
        wbCopy.Close False
    Next

    wb.Close False
    MsgBox "Done. Files saved to: " & outputFolder, vbInformation
End Sub





................................................................................................
Sub SplitWorkbookByOptionsColumnI()

    Dim wsOptions As Worksheet
    Dim uniqueValues As Collection
    Dim cell As Range, val As Variant
    Dim filePath As String, newWbPath As String
    Dim fName As String
    Dim wbOriginal As Workbook, wbCopy As Workbook
    Dim tempFile As String
    Dim saveFolder As String

    ' Reference the original workbook
    Set wbOriginal = ThisWorkbook
    Set wsOptions = wbOriginal.Sheets("Options")

    ' Ask for folder to save
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select folder to save split files"
        If .Show <> -1 Then Exit Sub
        saveFolder = .SelectedItems(1)
    End With

    ' Get unique values from Column I
    Set uniqueValues = New Collection
    On Error Resume Next
    For Each cell In wsOptions.Range("I2:I" & wsOptions.Cells(wsOptions.Rows.Count, "I").End(xlUp).Row)
        If Trim(cell.Value) <> "" Then
            uniqueValues.Add cell.Value, CStr(cell.Value)
        End If
    Next cell
    On Error GoTo 0

    ' Loop through each unique value and create a workbook copy
    For Each val In uniqueValues
        ' Save a temporary copy of the original workbook
        tempFile = saveFolder & "\TempCopy_" & Format(Now, "yyyymmdd_hhnnss") & ".xlsx"
        wbOriginal.SaveCopyAs tempFile

        ' Open the temporary copy
        Set wbCopy = Workbooks.Open(tempFile)

        ' Delete L3 View and L4 View sheets if they exist
        Application.DisplayAlerts = False
        On Error Resume Next
        wbCopy.Sheets("L3 View").Delete
        wbCopy.Sheets("L4 View").Delete
        On Error GoTo 0
        Application.DisplayAlerts = True

        ' Save with the unique name
        fName = CleanFileName(CStr(val)) & ".xlsx"
        newWbPath = saveFolder & "\" & fName
        wbCopy.SaveAs Filename:=newWbPath, FileFormat:=xlOpenXMLWorkbook
        wbCopy.Close SaveChanges:=False

        ' Delete temporary file
        Kill tempFile
    Next val

    MsgBox "✅ Files created successfully in: " & saveFolder, vbInformation

End Sub

' Helper function to clean file names
Function CleanFileName(s As String) As String
    Dim i As Integer, c As String
    Dim invalidChars As String
    invalidChars = "/\:*?""<>|"
    For i = 1 To Len(invalidChars)
        c = Mid(invalidChars, i, 1)
        s = Replace(s, c, "_")
    Next i
    CleanFileName = Trim(s)
End Function




You want to replicate the Excel formula:

`=RIGHT(TEXT([column_name], "0000000000"), 10)`

in Python.

Here's the equivalent Python code:

```
import pandas as pd

assuming 'df' is your DataFrame and 'column_name' is the column you want to process

df['new_column'] = df['column_name'].apply(lambda x: str(x).zfill(10)[-10:])
```

Explanation:

1. `str(x).zfill(10)` pads the value with leading zeros to a minimum length of 10 characters.
2. `[-10:]` extracts the last 10 characters from the padded string.

This code creates a new column 'new_column' with the processed values.
Sub UpdateL4SummaryDropdown()
    Dim wb As Workbook
    Dim wsOptions As Worksheet, wsL4Summary As Worksheet
    Dim folderPath As String, filePath As String
    Dim fso As Object, file As Object
    Dim lastRow As Long
    Dim rng As Range
    Dim dvRange As Range
    
    ' Disable screen updating for better performance
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

    ' Set folder path
    folderPath = ThisWorkbook.Path & "\Filtered_Files\"

    ' Create File System Object
    Set fso = CreateObject("Scripting.FileSystemObject")

    ' Ensure folder exists
    If Not fso.FolderExists(folderPath) Then
        MsgBox "Filtered_Files folder not found!", vbExclamation, "Error"
        Exit Sub
    End If

    ' Loop through each file in the folder
    For Each file In fso.GetFolder(folderPath).Files
        If LCase(Right(file.Name, 5)) = ".xlsx" Then
            ' Open the workbook
            Set wb = Workbooks.Open(file.Path)

            ' Set worksheet references
            On Error Resume Next
            Set wsOptions = wb.Sheets("Options")
            Set wsL4Summary = wb.Sheets("L4 Summary")
            On Error GoTo 0

            ' Skip if any sheet is missing
            If wsOptions Is Nothing Or wsL4Summary Is Nothing Then
                MsgBox "Missing required sheets in: " & wb.Name, vbExclamation, "Skipping"
                wb.Close False
                GoTo NextFile
            End If

            ' ---- GET L4 VALUES FROM OPTIONS SHEET ----
            lastRow = wsOptions.Cells(wsOptions.Rows.Count, "B").End(xlUp).Row

            ' If no values exist, clear the dropdown and continue
            If lastRow < 3 Then
                wsL4Summary.Range("B1").Validation.Delete
                wb.Save
                wb.Close False
                GoTo NextFile
            End If

            ' Define range for dropdown values (B3 to last value in B)
            Set rng = wsOptions.Range("B3:B" & lastRow)

            ' ---- UPDATE DROPDOWN IN L4 SUMMARY ----
            With wsL4Summary.Range("B1").Validation
                .Delete ' Remove old dropdown
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                     Operator:=xlBetween, Formula1:="=" & wsOptions.Name & "!" & rng.Address
                .IgnoreBlank = True
                .InCellDropdown = True
                .ShowInput = False
                .ShowError = False
            End With

            ' Save & close
            wb.Save
            wb.Close False

NextFile:
        End If
    Next file

    ' Restore application settings
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True

    ' Cleanup
    Set fso = Nothing

    MsgBox "L4 Summary dropdown updated in all files!", vbInformation, "Done"

End Sub


Sub FilterAndCleanFiles()
    Dim SaveFolder As String, FileName As String
    Dim wb As Workbook, ws As Worksheet
    Dim lastRow As Long
    Dim rng As Range, colG As Range
    Dim L3 As String

    ' Disable alerts, screen updating
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False

    ' Set the folder where files were saved
    SaveFolder = ThisWorkbook.Path & "\Filtered_Files\"

    ' Loop through each file in the folder
    FileName = Dir(SaveFolder & "*.xlsx")
    
    Do While FileName <> ""
        ' Open the workbook
        Set wb = Workbooks.Open(SaveFolder & FileName)
        
        ' Get L3 name from filename (remove ".xlsx")
        L3 = Replace(FileName, ".xlsx", "")
        
        ' Set reference to Data sheet
        On Error Resume Next
        Set ws = wb.Sheets("Data")
        On Error GoTo 0
        
        If Not ws Is Nothing Then
            ' Get last row in column G
            lastRow = ws.Cells(ws.Rows.Count, "G").End(xlUp).Row
            
            ' Apply AutoFilter on row 2
            ws.Rows("2:2").AutoFilter Field:=7, Criteria1:="<>" & L3
            
            ' Delete visible rows (except header)
            If lastRow > 2 Then
                Set rng = ws.Range("A3:A" & lastRow).SpecialCells(xlCellTypeVisible).EntireRow
                rng.Delete
            End If
            
            ' Turn off AutoFilter
            ws.AutoFilterMode = False
            
            ' Refresh all data connections
            wb.RefreshAll
        End If
        
        ' Save and close the workbook
        wb.Save
        wb.Close False
        
        ' Move to next file
        FileName = Dir
    Loop

    ' Re-enable alerts and screen updating
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    MsgBox "Filtering completed successfully!", vbInformation, "Done"
End Sub
