Sub UpdateFilteredFiles()
    Dim wb As Workbook, baseWb As Workbook
    Dim wsOptions As Worksheet, wsData As Worksheet
    Dim filePath As String, folderPath As String
    Dim L3Name As String
    Dim dictL4 As Object
    Dim fso As Object, file As Object
    Dim cell As Range, rngToDelete As Range
    Dim newRow As Long, countL4 As Long, countDeletedRows As Long
    Dim lastRowOptions As Long, lastRowData As Long
    
    ' Set base workbook
    Set baseWb = ThisWorkbook  ' The main file running this macro
    
    ' Set folder path where filtered files are saved
    folderPath = baseWb.Path & "\Filtered_Files\" ' Adjust if needed
    
    ' Create File System Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' Ensure the folder exists
    If Not fso.FolderExists(folderPath) Then
        MsgBox "Filtered_Files folder not found!", vbExclamation, "Error"
        Exit Sub
    End If

    ' Loop through each file in the folder
    For Each file In fso.GetFolder(folderPath).Files
        ' Process only Excel files
        If LCase(Right(file.Name, 5)) = ".xlsx" Then
            ' Open the filtered file
            Set wb = Workbooks.Open(file.Path)
            L3Name = Replace(wb.Name, ".xlsx", "")
            
            ' Debug: Show which file is being processed
            MsgBox "Processing File: " & wb.Name, vbInformation, "Debug"

            ' Set sheet references
            On Error Resume Next
            Set wsOptions = wb.Sheets("Options")
            Set wsData = wb.Sheets("Data")
            On Error GoTo 0
            
            If wsOptions Is Nothing Or wsData Is Nothing Then
                MsgBox "Missing Options or Data sheet in: " & wb.Name, vbExclamation, "Skipping"
                wb.Close False
                GoTo NextFile
            End If
            
            ' Clear previous L3 & L4 entries
            wsOptions.Range("A2:B" & wsOptions.Rows.Count).ClearContents

            ' Create dictionary to store unique L4 values
            Set dictL4 = CreateObject("Scripting.Dictionary")

            ' Identify last row in Options (Col D = L3, Col E = L4s)
            lastRowOptions = wsOptions.Cells(wsOptions.Rows.Count, "D").End(xlUp).Row
            newRow = 2 ' Start from row 2 (keep headers intact)
            countL4 = 0

            ' Loop through Options sheet to filter L3 & L4 values
            For Each cell In wsOptions.Range("D2:D" & lastRowOptions)
                If cell.Value = L3Name Then
                    ' Add L3 to Column A
                    wsOptions.Cells(newRow, 1).Value = L3Name

                    ' Add unique L4s to Column B
                    If Not dictL4.Exists(wsOptions.Cells(cell.Row, "E").Value) Then
                        dictL4.Add wsOptions.Cells(cell.Row, "E").Value, Nothing
                        wsOptions.Cells(newRow, 2).Value = wsOptions.Cells(cell.Row, "E").Value
                        newRow = newRow + 1
                        countL4 = countL4 + 1
                    End If
                End If
            Next cell

            ' Add "*" as first entry in L4 dropdown
            If countL4 > 0 Then
                wsOptions.Rows("2:2").Insert Shift:=xlDown
                wsOptions.Cells(2, 2).Value = "*"
            End If

            ' Debugging - Show count of L4s added
            MsgBox "L4s updated in " & wb.Name & ": " & countL4, vbInformation, "Debug"

            ' ---- FILTER DATA SHEET ----
            lastRowData = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
            countDeletedRows = 0

            ' Find and delete rows where Column A does NOT match L3
            For Each cell In wsData.Range("A2:A" & lastRowData)
                If cell.Value <> L3Name Then
                    If rngToDelete Is Nothing Then
                        Set rngToDelete = cell
                    Else
                        Set rngToDelete = Union(rngToDelete, cell)
                    End If
                    countDeletedRows = countDeletedRows + 1
                End If
            Next cell

            ' Delete rows that donâ€™t match the L3Name
            If Not rngToDelete Is Nothing Then rngToDelete.EntireRow.Delete

            ' Debugging - Show count of deleted rows
            MsgBox "Rows deleted in Data sheet of " & wb.Name & ": " & countDeletedRows, vbInformation, "Debug"

            ' Save and close the filtered file
            wb.Save
            wb.Close False

NextFile:
        End If
    Next file

    ' Cleanup
    Set fso = Nothing
    Set dictL4 = Nothing

    ' Completion message
    MsgBox "Filtering & dropdown update completed for all filtered files.", vbInformation, "Done"
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub
